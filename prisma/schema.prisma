datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id               String             @id @default(cuid())
  name             String
  email            String             @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  communities      Community[]        @relation(name: "members")
  communityAdmin   Community[]        @relation(name: "community_admins")
  messages         Message[]
  profile          Profile?
  posts            Post[]
  institutionAdmin Institution[]      @relation(name: "institution_admins")
  institution      Institution?       @relation(fields: [institutionId], references: [id])
  institutionId    String?
  PendingApprovals PendingApprovals[]
  postComments     PostComments[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Profile {
  id           String  @id @unique @default(cuid())
  username     String  @unique
  user         User    @relation(fields: [userId], references: [id])
  bio          String?
  githubLink   String?
  linkedinLink String?
  userId       String  @unique
}

model Post {
  id            String         @id @unique @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  content       String
  published     Boolean
  author        User           @relation(fields: [userId], references: [id])
  title         String
  bannerImage   String?
  categories    Category[]
  isntitution   Institution    @relation(fields: [institutionId], references: [id])
  slug          String         @unique
  userId        String
  institutionId String
  postComments  PostComments[]
}

model PostComments {
  id      String @id @unique @default(cuid())
  comment String
  post    Post   @relation(fields: [postId], references: [id])
  postId  String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
}

model Category {
  id    String @id @unique @default(cuid())
  name  String
  posts Post[]
}

model Community {
  id               String             @id @default(cuid())
  name             String             @unique
  desc             String?
  type             CommunityType      @default(PUBLIC)
  default          Boolean            @unique @default(false)
  members          User[]             @relation(name: "members")
  admins           User[]             @relation(name: "community_admins")
  messages         Message[]
  image            String?
  code             String             @unique @default(cuid())
  institution      Institution        @relation(fields: [institutionId], references: [id])
  institutionId    String
  pendingApprovals PendingApprovals[]
}

model PendingApprovals {
  id          String    @id @default(cuid())
  approved    Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
}

model Message {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sender      User      @relation(fields: [userId], references: [id])
  community   Community @relation(fields: [communityId], references: [id])
  userId      String
  communityId String
  // TODO => add message replies
}

model Institution {
  id           String      @id @default(cuid())
  name         String      @unique
  memberCode   String      @unique @default(cuid())
  adminCode    String      @unique @default(cuid())
  image        String?
  website      String?
  supportEmail String?
  communities  Community[]
  members      User[]
  admins       User[]      @relation("institution_admins")
  posts        Post[]

  @@unique([adminCode, memberCode])
}

enum CommunityType {
  PUBLIC //Anyone can view and message
  PRIVATE // Only members with code with can join and msg
  RESTRICTED //Anyone can view, but must request access from admin to become member and send msg
}
