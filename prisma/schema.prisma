datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String?        @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  profile              Profile?
  posts                Post[]
  postComments         PostComments[]
  messages             Message[]
  communityAdmins      Community[]    @relation("community_admins", fields: [communityAdminIds], references: [id])
  communityAdminIds    String[]       @db.ObjectId
  communityMembers     Community[]    @relation("community_members", fields: [communityMemberIds], references: [id])
  communityMemberIds   String[]       @db.ObjectId
  institutionAdmins    Institution[]  @relation("institution_admins", fields: [institutionAdminIds], references: [id])
  institutionAdminIds  String[]       @db.ObjectId
  institutionMembers   Institution[]  @relation("institution_members", fields: [institutionMemberIds], references: [id])
  institutionMemberIds String[]       @db.ObjectId
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  bio          String?
  githubLink   String?
  linkedinLink String?
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique @db.ObjectId
}

model Post {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  content       String
  published     Boolean
  title         String
  banner        String?
  slug          String         @unique
  institution   Institution    @relation(fields: [institutionId], references: [id])
  institutionId String         @db.ObjectId
  author        User           @relation(fields: [userId], references: [id])
  userId        String         @db.ObjectId
  postComments  PostComments[]
  categories    Category[]
}

model PostComments {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String
  Post    Post?   @relation(fields: [postId], references: [id])
  postId  String? @db.ObjectId
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @db.ObjectId
}

model Category {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  post   Post?   @relation(fields: [postId], references: [id])
  postId String? @db.ObjectId
}

model Community {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String             @unique
  desc             String?
  private          Boolean            @default(false)
  default          Boolean            @unique @default(false)
  image            String?
  code             String             @unique @default(cuid())
  admins           User[]             @relation("community_admins", fields: [adminIds], references: [id])
  adminIds         String[]           @db.ObjectId
  members          User[]             @relation("community_members", fields: [adminIds], references: [id])
  memberIds        String[]           @db.ObjectId
  institution      Institution        @relation(fields: [institutionId], references: [id])
  institutionId    String             @db.ObjectId
  pendingApprovals PendingApprovals[]
  messages         Message[]
}

model PendingApprovals {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  approved    Boolean   @default(false)
  Community   Community @relation(fields: [communityId], references: [id])
  communityId String    @db.ObjectId
}

model Message {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Community   Community? @relation(fields: [communityId], references: [id])
  communityId String?    @db.ObjectId
  sender      User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId
  // TODO => add message replies
}

model Institution {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String      @unique
  memberCode   String      @unique @default(cuid())
  adminCode    String      @unique @default(cuid())
  image        String?
  website      String?
  supportEmail String?
  posts        Post[]
  communities  Community[]
  admins       User[]      @relation("institution_admins", fields: [adminIds], references: [id])
  adminIds     String[]    @db.ObjectId
  members      User[]      @relation("institution_members", fields: [adminIds], references: [id])
  memberIds    String[]    @db.ObjectId

  @@unique([adminCode, memberCode])
}
