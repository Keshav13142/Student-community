datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   theme    = "forest"
//   output   = "./ERD.png"
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                 String             @id @default(cuid())
  name               String
  email              String             @unique
  emailVerified      DateTime?
  image              String?
  enrollmentStatus   Status             @default(PENDING)
  hasProfile         Boolean            @default(false)
  isInstitutionAdmin Boolean            @default(false)
  isGuest            Boolean            @default(false)
  postCount          Int?               @default(0)
  communityCount     Int?               @default(0)
  username           String?            @unique
  bio                String?
  githubLink         String?
  linkedinLink       String?
  accounts           Account[]
  sessions           Session[]
  messages           Message[]
  posts              Post[]
  PendingApprovals   PendingApprovals[]
  postComments       PostComments[]
  communityMember    CommunityMember[]
  institutionMember  InstitutionMember?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Post {
  id            String         @id @unique @default(cuid())
  // Making this optional cause I want it have a slug only when it's published (use Id when is's a draft)
  slug          String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  content       String         @db.LongText
  published     Boolean
  author        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  title         String
  bannerImage   String?
  categories    Category[]
  institution   Institution    @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  userId        String
  institutionId String
  postComments  PostComments[]

  @@index([userId])
  @@index([institutionId])
}

model PostComments {
  id        String   @id @unique @default(cuid())
  comment   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  createdAt DateTime @default(now())

  @@index([postId])
  @@index([userId])
}

model Category {
  id    String @id @unique @default(cuid())
  name  String
  posts Post[]
  // ?: Do we need to add a relation to institutions
}

model Community {
  id               String             @id @default(cuid())
  name             String
  desc             String?
  type             CommunityType      @default(PUBLIC)
  default          Boolean            @default(false)
  members          CommunityMember[]
  messages         Message[]
  image            String?
  institution      Institution        @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  institutionId    String
  pendingApprovals PendingApprovals[]
  inviteCodes      InviteCode[]

  @@index([institutionId])
}

model PendingApprovals {
  id            String       @id @default(cuid())
  status        Status       @default(PENDING)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  community     Community?   @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId   String?
  institution   Institution? @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  institutionId String?

  @@unique([userId, communityId])
  @@index([communityId])
  @@index([institutionId])
}

model CommunityMember {
  id          String              @id @default(cuid())
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        CommunityMemberType @default(MEMBER)
  Community   Community           @relation(fields: [communityId], references: [id], onDelete: Cascade)
  userId      String
  communityId String

  @@index([userId])
  @@index([communityId])
}

model Message {
  id          String    @id @default(cuid())
  content     String?
  createdAt   DateTime  @default(now())
  isDeleted   Boolean   @default(false)
  deletedBy   String?
  updatedAt   DateTime  @updatedAt
  sender      User?     @relation(fields: [senderId], references: [id], onDelete: SetNull)
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  senderId    String?
  communityId String
  // TODO => add message replies

  @@index([senderId])
  @@index([communityId])
}

model Institution {
  id               String              @id @default(cuid())
  name             String              @unique
  desc             String?
  image            String?
  website          String?
  supportEmail     String?
  members          InstitutionMember[]
  communities      Community[]
  posts            Post[]
  pendingApprovals PendingApprovals[]
  inviteCodes      InviteCode[]
}

model InstitutionMember {
  id            String        @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          AdminOrMember @default(MEMBER)
  Institution   Institution   @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  userId        String        @unique
  institutionId String

  @@index([institutionId])
}

model InviteCode {
  id            String        @id @default(cuid())
  code          String        @unique @default(cuid())
  type          AdminOrMember
  community     Community?    @relation(fields: [communityId], references: [id])
  institution   Institution?  @relation(fields: [institutionId], references: [id])
  communityId   String?
  institutionId String?

  @@index([communityId])
  @@index([institutionId])
}

enum CommunityType {
  PUBLIC //Anyone can view and message
  PRIVATE // Only members with code with can join and msg
  RESTRICTED //Anyone can view, but must request access from admin to become member and send msg
}

enum AdminOrMember {
  ADMIN
  MEMBER
}

enum CommunityMemberType {
  ADMIN
  MEMBER
  MODERATOR
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
