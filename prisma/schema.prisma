datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id                 String             @id @default(cuid())
  name               String
  email              String             @unique
  emailVerified      DateTime?
  image              String?
  hasProfile         Boolean            @default(false)
  username           String?            @unique
  bio                String?
  githubLink         String?
  linkedinLink       String?
  accounts           Account[]
  sessions           Session[]
  communities        Community[]        @relation("community_members")
  communityAdmin     Community[]        @relation("community_admins")
  communityModerator Community[]        @relation("community_moderators")
  messages           Message[]
  posts              Post[]
  institutionAdmin   Institution?       @relation("institution_admins", fields: [institutionAdminId], references: [id])
  institutionAdminId String?
  institution        Institution?       @relation("institution_members", fields: [institutionId], references: [id])
  institutionId      String?
  PendingApprovals   PendingApprovals[]
  postComments       PostComments[]
  type               UserType           @default(MEMBER)
  // profile            Profile?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// model Profile {
//   id           String  @id @unique @default(cuid())
//   username     String  @unique
//   bio          String?
//   githubLink   String?
//   linkedinLink String?
//   user         User    @relation(fields: [userId], references: [id])
//   userId       String  @unique
// }

model Post {
  id            String         @id @unique @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  content       String
  published     Boolean
  author        User           @relation(fields: [userId], references: [id])
  title         String
  bannerImage   String?
  categories    Category[]
  isntitution   Institution    @relation(fields: [institutionId], references: [id])
  slug          String         @unique
  userId        String
  institutionId String
  postComments  PostComments[]
}

model PostComments {
  id      String @id @unique @default(cuid())
  comment String
  post    Post   @relation(fields: [postId], references: [id])
  postId  String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
}

model Category {
  id    String @id @unique @default(cuid())
  name  String
  posts Post[]
}

model Community {
  id               String             @id @default(cuid())
  name             String             @unique
  desc             String?
  type             CommunityType      @default(PUBLIC)
  default          Boolean            @default(false)
  members          User[]             @relation("community_members")
  admins           User[]             @relation("community_admins")
  messages         Message[]
  moderators       User[]             @relation("community_moderators")
  image            String?
  code             String             @unique @default(cuid())
  institution      Institution        @relation(fields: [institutionId], references: [id])
  institutionId    String
  pendingApprovals PendingApprovals[]
}

model PendingApprovals {
  id          String         @id @default(cuid())
  status      ApprovalStatus @default(PENDING)
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  community   Community      @relation(fields: [communityId], references: [id])
  communityId String

  @@unique([userId, communityId])
}

model Message {
  id          String      @id @default(cuid())
  content     String
  createdAt   DateTime    @default(now())
  flag        MessageFlag @default(VISIBLE)
  updatedAt   DateTime    @updatedAt
  sender      User        @relation(fields: [senderId], references: [id])
  community   Community   @relation(fields: [communityId], references: [id])
  senderId    String
  communityId String
  // TODO => add message replies
}

model Institution {
  id           String      @id @default(cuid())
  name         String      @unique
  memberCode   String      @unique @default(cuid())
  adminCode    String      @unique @default(cuid())
  image        String?
  website      String?
  supportEmail String?
  communities  Community[]
  members      User[]      @relation("institution_members")
  admins       User[]      @relation("institution_admins")
  posts        Post[]

  @@unique([adminCode, memberCode])
}

enum CommunityType {
  PUBLIC //Anyone can view and message
  PRIVATE // Only members with code with can join and msg
  RESTRICTED //Anyone can view, but must request access from admin to become member and send msg
}

enum UserType {
  ADMIN // Can create communtities and appoint other admins.
  MEMBER // Members can also be appointed as moderators, with elevated priviledges
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MessageFlag {
  HIDDEN
  VISIBLE
}
